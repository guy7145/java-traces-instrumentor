public class tests.factorial extends java.lang.Object
{

    public void <init>()
    {
        tests.factorial r0;

        r0 := @this: tests.factorial;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void hello(int, int)
    {
        int i0, i1;
        java.io.PrintStream $r0, $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <flyClasses.Trace: void newExample(java.lang.String)>("hello");

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(int)>(i0);

        staticinvoke <flyClasses.Trace: void UpdateInvoke(java.lang.String)>("virtualinvoke $r0.<java.io.PrintStream: void println(int)>(i0)");

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i1);

        staticinvoke <flyClasses.Trace: void UpdateInvoke(java.lang.String)>("virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i1)");

        staticinvoke <flyClasses.Trace: void UpdateReturn()>();

        return;
    }

    public static int fact(int)
    {
        int i0, i1, i2;

        i0 := @parameter0: int;

        staticinvoke <flyClasses.Trace: void newExample(java.lang.String)>("fact");

        i1 = 1;

        staticinvoke <flyClasses.Trace: void UpdateAssignmentPrimitive(java.lang.String,int)>("i1", i1);

        staticinvoke <tests.factorial: void hello(int,int)>(1, 2);

        staticinvoke <flyClasses.Trace: void UpdateInvoke(java.lang.String)>("staticinvoke <tests.factorial: void hello(int,int)>(1, 2)");

        i2 = 1;

        staticinvoke <flyClasses.Trace: void UpdateAssignmentPrimitive(java.lang.String,int)>("i2", i2);

        goto label2;

     label1:
        i1 = i1 * i2;

        staticinvoke <flyClasses.Trace: void UpdateAssignmentPrimitive(java.lang.String,int)>("i1", i1);

        i2 = i2 + 1;

        staticinvoke <flyClasses.Trace: void UpdateAssignmentPrimitive(java.lang.String,int)>("i2", i2);

     label2:
        if i2 <= i0 goto label1;

        staticinvoke <flyClasses.Trace: void UpdateReturn()>();

        return i1;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        java.lang.Object[] $r1;
        java.io.PrintStream $r2;
        java.lang.Integer $r3, $r4;
        int $i1, i2;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <flyClasses.Trace: void newExample(java.lang.String)>("main");

        i2 = 0;

        staticinvoke <flyClasses.Trace: void UpdateAssignmentPrimitive(java.lang.String,int)>("i2", i2);

        goto label2;

     label1:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r1[0] = $r3;

        $i1 = staticinvoke <tests.factorial: int fact(int)>(i2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r4;

        virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("%d!=%d\n", $r1);

        staticinvoke <flyClasses.Trace: void UpdateInvoke(java.lang.String)>("virtualinvoke $r2.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(\"%d!=%d\\n\", $r1)");

        i2 = i2 + 1;

        staticinvoke <flyClasses.Trace: void UpdateAssignmentPrimitive(java.lang.String,int)>("i2", i2);

     label2:
        if i2 < 7 goto label1;

        staticinvoke <flyClasses.Trace: void UpdateReturn()>();

        staticinvoke <flyClasses.Trace: void Finish()>();

        return;
    }
}
