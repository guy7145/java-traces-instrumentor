public class flyClasses.Scope extends java.lang.Object
{
    public static final java.lang.String CLASS_NAME;
    java.lang.Object val;
    flyClasses.Scope currentValScope;
    java.util.Map innerScopes;

    public void <init>()
    {
        flyClasses.Scope r0;

        r0 := @this: flyClasses.Scope;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<flyClasses.Scope: java.lang.Object val> = null;

        specialinvoke r0.<flyClasses.Scope: void resetScope()>();

        return;
    }

    private void resetScope()
    {
        flyClasses.Scope r0;
        java.util.HashMap $r1;
        int mylocal;
        java.lang.Object $mylocal;

        r0 := @this: flyClasses.Scope;

        staticinvoke <flyClasses.Trace: void setDeltaMode(boolean)>(1);

        staticinvoke <flyClasses.Trace: void defTypes(java.lang.String)>("type tests.sll$SLL {\n\tnext:tests.sll$SLL\n\tdata:int\n}\n");

        staticinvoke <flyClasses.Trace: void newExample(java.lang.String)>("resetScope(mut r3:tests.sll$SLL, mut $r1:tests.sll$SLL, mut r0:flyClasses.Scope, mut r0.innerScopes:java.util.Map) -> ()");

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("r3", 0);

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("$r1", 0);

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("r0", 0);

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("r0.innerScopes", 0);

        staticinvoke <flyClasses.Trace: void FinishedInitLocals()>();

        $r1 = new java.util.HashMap;

        staticinvoke <flyClasses.Trace: void UpdateAssignmentObject(java.lang.String,java.lang.Object)>("$r1", "new java.util.HashMap");

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<flyClasses.Scope: java.util.Map innerScopes> = $r1;

        $mylocal = r0.<flyClasses.Scope: java.util.Map innerScopes>;

        staticinvoke <flyClasses.Trace: void UpdateAssignmentObject(java.lang.String,java.lang.Object)>("r0.innerScopes", $mylocal);

        staticinvoke <flyClasses.Trace: void UpdateReturn()>();

        return;
    }

    private void setVal(java.lang.Object)
    {
        flyClasses.Scope r0;
        java.lang.Object r1, $mylocal;
        int mylocal;

        r0 := @this: flyClasses.Scope;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <flyClasses.Trace: void setDeltaMode(boolean)>(1);

        staticinvoke <flyClasses.Trace: void defTypes(java.lang.String)>("type tests.sll$SLL {\n\tnext:tests.sll$SLL\n\tdata:int\n}\n");

        staticinvoke <flyClasses.Trace: void newExample(java.lang.String)>("setVal(mut r0.val:java.lang.Object, mut r0:flyClasses.Scope, mut r1:java.lang.Object) -> ()");

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("r0.val", 0);

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("r0", 0);

        staticinvoke <flyClasses.Trace: void InitLocalObject(java.lang.String,java.lang.Object)>("r1", r1);

        staticinvoke <flyClasses.Trace: void FinishedInitLocals()>();

        r0.<flyClasses.Scope: java.lang.Object val> = r1;

        $mylocal = r0.<flyClasses.Scope: java.lang.Object val>;

        staticinvoke <flyClasses.Trace: void UpdateAssignmentObject(java.lang.String,java.lang.Object)>("r0.val", $mylocal);

        specialinvoke r0.<flyClasses.Scope: void resetScope()>();

        staticinvoke <flyClasses.Trace: void UpdateReturn()>();

        return;
    }

    private java.lang.Object getVal()
    {
        flyClasses.Scope r0;
        java.lang.Object $r1, $mylocal;
        int mylocal;

        r0 := @this: flyClasses.Scope;

        staticinvoke <flyClasses.Trace: void setDeltaMode(boolean)>(1);

        staticinvoke <flyClasses.Trace: void defTypes(java.lang.String)>("type tests.sll$SLL {\n\tnext:tests.sll$SLL\n\tdata:int\n}\n");

        staticinvoke <flyClasses.Trace: void newExample(java.lang.String)>("getVal(mut $r1:java.lang.Object, mut r0:flyClasses.Scope) -> ($r1:java.lang.Object)");

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("$r1", 0);

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("r0", 0);

        staticinvoke <flyClasses.Trace: void FinishedInitLocals()>();

        $r1 = r0.<flyClasses.Scope: java.lang.Object val>;

        staticinvoke <flyClasses.Trace: void UpdateAssignmentObject(java.lang.String,java.lang.Object)>("$r1", "r0.val");

        staticinvoke <flyClasses.Trace: void UpdateReturn()>();

        return $r1;
    }

    public void set(java.lang.String, java.lang.Object)
    {
        flyClasses.Scope r0, r3;
        java.lang.String r1;
        java.lang.Object r2, $mylocal;
        int mylocal;

        r0 := @this: flyClasses.Scope;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        staticinvoke <flyClasses.Trace: void setDeltaMode(boolean)>(1);

        staticinvoke <flyClasses.Trace: void defTypes(java.lang.String)>("type tests.sll$SLL {\n\tnext:tests.sll$SLL\n\tdata:int\n}\n");

        staticinvoke <flyClasses.Trace: void newExample(java.lang.String)>("set(mut r2:java.lang.Object, mut r3:flyClasses.Scope, mut r0:flyClasses.Scope, mut r1:java.lang.String) -> ()");

        staticinvoke <flyClasses.Trace: void InitLocalObject(java.lang.String,java.lang.Object)>("r2", r2);

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("r3", 0);

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("r0", 0);

        staticinvoke <flyClasses.Trace: void InitLocalObject(java.lang.String,java.lang.Object)>("r1", r1);

        staticinvoke <flyClasses.Trace: void FinishedInitLocals()>();

        r3 = specialinvoke r0.<flyClasses.Scope: flyClasses.Scope getScope(java.lang.String)>(r1);

        staticinvoke <flyClasses.Trace: void UpdateAssignmentObject(java.lang.String,java.lang.Object)>("r3", "specialinvoke r0.<flyClasses.Scope: flyClasses.Scope getScope(java.lang.String)>(r1)");

        specialinvoke r3.<flyClasses.Scope: void setVal(java.lang.Object)>(r2);

        staticinvoke <flyClasses.Trace: void UpdateReturn()>();

        return;
    }

    private flyClasses.Scope getScope(java.lang.String)
    {
        flyClasses.Scope r0, r4;
        java.lang.String r1, $r3;
        java.lang.String[] r2;
        int $i0, i1, mylocal;
        java.lang.Object $mylocal;

        r0 := @this: flyClasses.Scope;

        r1 := @parameter0: java.lang.String;

        staticinvoke <flyClasses.Trace: void setDeltaMode(boolean)>(1);

        staticinvoke <flyClasses.Trace: void defTypes(java.lang.String)>("type tests.sll$SLL {\n\tnext:tests.sll$SLL\n\tdata:int\n}\n");

        staticinvoke <flyClasses.Trace: void newExample(java.lang.String)>("getScope(mut r2:java.lang.String[], mut r4:flyClasses.Scope, mut $r3:java.lang.String, mut i1:int, mut $i0:int, mut r0:flyClasses.Scope, mut r1:java.lang.String) -> (r4:flyClasses.Scope)");

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("r2", 0);

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("r4", 0);

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("$r3", 0);

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("i1", 1);

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("$i0", 1);

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("r0", 0);

        staticinvoke <flyClasses.Trace: void InitLocalObject(java.lang.String,java.lang.Object)>("r1", r1);

        staticinvoke <flyClasses.Trace: void FinishedInitLocals()>();

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(".");

        staticinvoke <flyClasses.Trace: void UpdateAssignmentObject(java.lang.String,java.lang.Object)>("r2", "virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(\".\")");

        r4 = r0;

        staticinvoke <flyClasses.Trace: void UpdateAssignmentObject(java.lang.String,java.lang.Object)>("r4", "r0");

        i1 = 0;

        staticinvoke <flyClasses.Trace: void UpdateAssignmentPrimitive(java.lang.String,int)>("i1", i1);

        goto label2;

     label1:
        $r3 = r2[i1];

        staticinvoke <flyClasses.Trace: void UpdateAssignmentObject(java.lang.String,java.lang.Object)>("$r3", "r2[i1]");

        r4 = specialinvoke r4.<flyClasses.Scope: flyClasses.Scope getScope(java.lang.String)>($r3);

        staticinvoke <flyClasses.Trace: void UpdateAssignmentObject(java.lang.String,java.lang.Object)>("r4", "specialinvoke r4.<flyClasses.Scope: flyClasses.Scope getScope(java.lang.String)>($r3)");

        i1 = i1 + 1;

        staticinvoke <flyClasses.Trace: void UpdateAssignmentPrimitive(java.lang.String,int)>("i1", i1);

     label2:
        $i0 = lengthof r2;

        staticinvoke <flyClasses.Trace: void UpdateAssignmentPrimitive(java.lang.String,int)>("$i0", $i0);

        if i1 < $i0 goto label1;

        staticinvoke <flyClasses.Trace: void UpdateReturn()>();

        return r4;
    }

    public java.lang.Object get(java.lang.String)
    {
        flyClasses.Scope r0, $r2;
        java.lang.String r1;
        java.lang.Object $r3, $mylocal;
        int mylocal;

        r0 := @this: flyClasses.Scope;

        r1 := @parameter0: java.lang.String;

        staticinvoke <flyClasses.Trace: void setDeltaMode(boolean)>(1);

        staticinvoke <flyClasses.Trace: void defTypes(java.lang.String)>("type tests.sll$SLL {\n\tnext:tests.sll$SLL\n\tdata:int\n}\n");

        staticinvoke <flyClasses.Trace: void newExample(java.lang.String)>("get(mut $r2:flyClasses.Scope, mut $r3:java.lang.Object, mut r0:flyClasses.Scope, mut r1:java.lang.String) -> ($r3:java.lang.Object)");

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("$r2", 0);

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("$r3", 0);

        staticinvoke <flyClasses.Trace: void InitLocalDefault(java.lang.String,boolean)>("r0", 0);

        staticinvoke <flyClasses.Trace: void InitLocalObject(java.lang.String,java.lang.Object)>("r1", r1);

        staticinvoke <flyClasses.Trace: void FinishedInitLocals()>();

        $r2 = specialinvoke r0.<flyClasses.Scope: flyClasses.Scope getScope(java.lang.String)>(r1);

        staticinvoke <flyClasses.Trace: void UpdateAssignmentObject(java.lang.String,java.lang.Object)>("$r2", "specialinvoke r0.<flyClasses.Scope: flyClasses.Scope getScope(java.lang.String)>(r1)");

        $r3 = specialinvoke $r2.<flyClasses.Scope: java.lang.Object getVal()>();

        staticinvoke <flyClasses.Trace: void UpdateAssignmentObject(java.lang.String,java.lang.Object)>("$r3", "specialinvoke $r2.<flyClasses.Scope: java.lang.Object getVal()>()");

        staticinvoke <flyClasses.Trace: void UpdateReturn()>();

        return $r3;
    }

    public static void <clinit>()
    {
        <flyClasses.Scope: java.lang.String CLASS_NAME> = "flyClasses.Scope";

        return;
    }
}
